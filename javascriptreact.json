{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	/* ======================== JavaScript snippet ======================== */
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.${1|log, dir, table, warn|}('$2');",
			"$3",
			"",
			""
		],
		"description": "Log output to console"
	},
	"Arrow Function": {
		"prefix": "af",
		"body": [
			"const ${1:function_name} = (${2:..args}) => {",
			"	$3",
			"};",
			"",
			""
		],
		"description": "Arrow Function"
	},
	"Normal Function": {
		"prefix": "fun",
		"body": [
			"function ${1:function_name}(${2}) {",
			"	${3}",
			"}",
			"",
			""
		],
		"description": "Normal Function"
	},
	"Arrow Async Function": {
		"prefix": "asnc",
		"body": [
			"// async ${1:function_name} ",
			"",
			"const ${2:function_name} = async (${3:url}) => {",
			"",
			"    try {",
			"",
			"        const response = await fetch(${4:url});",
			"        const data = await response.json();",
			"",
			"        return data;",
			"",
			"    } catch (error) {",
			"        console.error(error);",
			"    }",
			"};",
			"",
			""
		],
		"description": "Arrow Async Function"
	},
	"Custom Comment": {
		"prefix": "/",
		"body": [
			"/*",
			"* Title: ${1:Title}",
			"* Description:${2:Description}",
			"* Author: ${3:Joy Sarkar}",
			"* Date: $CURRENT_DATE-$CURRENT_MONTH_NAME_SHORT-$CURRENT_YEAR  ",
			"*/",
			"",
			""
		],
		"description": "Custom Comment"
	},
	/* ======================== React js snippet ======================== */
	"React Functional Component": {
		"prefix": "rsc",
		"body": [
			"import React from 'react'",
			"",
			"export default function $TM_FILENAME_BASE() {",
			"   return <div>",
			"		$1",
			"   </div>",
			"}"
		],
		"description": "React Functional Component"
	},
	"React Class Component": {
		"prefix": "rcc",
		"body": [
			"import React, { Component } from 'react';",
			"",
			"class $TM_FILENAME_BASE extends Component {",
			"    constructor(props) {",
			"        super(props);",
			"        this.state = {",
			"            ${1:stateValue}: ${2:value}",
			"        };",
			"    }",
			"",
			"",
			"    render() {",
			"        return (",
			"            <div>",
			"                $3",
			"            </div>",
			"        );",
			"    }",
			"}",
			"",
			"export default $TM_FILENAME_BASE;",
		],
		"description": "React Class Component"
	},
	/* ======================== Redux RTK Query snippet ======================== */
	"Redux RTK Use Qurey Example": {
		"prefix": "rtk-useQuery",
		"body": [
			"const { data, error, isLoading } = use${1:queryName}Query();",
			"",
			""
		],
		"description": "Redux RTK Use Qurey Example"
	},
	"Redux RTK Use Mutation Example": {
		"prefix": "rtk-useMutation",
		"body": [
			"const [${1:endpoint}, /* result || */ { isLoading, isError, isSuccess }] = use${2:DataName}Mutation();",
			"",
			""
		],
		"description": "Redux RTK Use Mutation Example"
	},
	"Redux Use Selector Example": {
		"prefix": "rtk-selector",
		"body": [
			"const { ${2:childObjName} } = useSelector(state => state.${1:mainObjName});"
		],
		"description": "Redux Use Selector Example"
	},
	"Redux Use Dispatch Example": {
		"prefix": "rtk-dispatch",
		"body": [
			"const dispatch = useDispatch();"
		],
		"description": "Redux Use Selector Example"
	}
}